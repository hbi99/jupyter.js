<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=10">
<meta name="viewport" content="width=device-width,minimum-scale=1.0,initial-scale=1.0" />
<title></title>
<link type="text/css" href="../dist/jupyter.min.css" media="all" rel="stylesheet"/>
<script type="text/javascript" src="../dist/jupyter.min.js"></script>
</head>
<body>

<div class="markdown-body">

<pre><code class="language-js"><span>/* jupyter:active */</span>

(async () => {
    var THREE = await fetchScript('./modules/three.js');
    var view = console.view({ height: 300 });

    // create a scene, that will hold all our elements such as objects, cameras and lights.
    var scene = new THREE.Scene(),
        // create a camera, which defines where we're looking at.
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000),
        // create a render and set the size
        webGLRenderer = new THREE.WebGLRenderer();

    webGLRenderer.setClearColor(new THREE.Color(0x000000, 1.0));
    webGLRenderer.setSize(view.width, view.height);
    webGLRenderer.shadowMapEnabled = true;

    // position and point the camera to the center of the scene
    camera.position.x = -30;
    camera.position.y = 40;
    camera.position.z = 50;
    camera.lookAt(new THREE.Vector3(10, 0, 0));

    // add the output of the renderer to the html element
    view.el.append(webGLRenderer.domElement);

    // call the render function
    var step = 0,
        knot;

    // setup the control gui
    var controls = new function () {
        // we need the first child, since it's a multimaterial
        this.radius = 40;
        this.tube = 28.2;
        this.radialSegments = 600;
        this.tubularSegments = 9;
        this.p = 5;
        this.q = 4;
        this.heightScale = 1;
        this.asParticles = true;
        this.rotate = true;
        this.redraw = function () {
            // remove the old plane
            if (knot) scene.remove(knot);
            // create a new one
            var geom = new THREE.TorusKnotGeometry(controls.radius, controls.tube,
                    Math.round(controls.radialSegments),
                    Math.round(controls.tubularSegments),
                    Math.round(controls.p),
                    Math.round(controls.q), controls.heightScale);

            if (controls.asParticles) {
                knot = createParticleSystem(geom);
            } else {
                knot = createMesh(geom);
            }
            // add it to the scene.
            scene.add(knot);
        };
    }

    controls.redraw();
    render();

    // from THREE.js examples
    function generateSprite() {
        var canvas = document.createElement('canvas'),
            context = canvas.getContext('2d'),
            gradient,
            texture;
        canvas.width = 16;
        canvas.height = 16;

        gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
        gradient.addColorStop(0, 'rgba(255,255,255,1)');
        gradient.addColorStop(0.2, 'rgba(0,255,255,1)');
        gradient.addColorStop(0.4, 'rgba(0,0,64,1)');
        gradient.addColorStop(1, 'rgba(0,0,0,1)');
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);

        texture = new THREE.Texture(canvas);
        texture.needsUpdate = true;
        return texture;
    }

    function createParticleSystem(geom) {
        var material = new THREE.PointCloudMaterial({
                color: 0xffffff,
                size: 3,
                transparent: true,
                blending: THREE.AdditiveBlending,
                map: generateSprite()
            }),
            system = new THREE.PointCloud(geom, material);
        system.sortParticles = true;
        return system;
    }

    function createMesh(geom) {
        // assign two materials
        var meshMaterial = new THREE.MeshNormalMaterial({}),
            mesh;
        meshMaterial.side = THREE.DoubleSide;
        // create a multimaterial
        mesh = THREE.SceneUtils.createMultiMaterialObject(geom, [meshMaterial]);
        return mesh;
    }

    function render() {
        if (controls.rotate) {
            knot.rotation.y = step += 0.01;
        }
        // render using requestAnimationFrame
        requestAnimationFrame(render);
        webGLRenderer.render(scene, camera);
    }

})();
</code></pre>

</div>

</body>
</html>